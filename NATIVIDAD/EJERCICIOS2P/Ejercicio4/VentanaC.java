import java.awt.GridLayout;
import java.util.LinkedList;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.Color;
import javax.swing.UIManager;

//Clase que maneja la interfaz gráfica del cliente
public class VentanaC extends javax.swing.JFrame {
    
    public String mensaje;

    /*
     * Constructor de la ventana.
     */
    public VentanaC() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String ip_puerto_nombre[]=getIP_Puerto_Nombre();
        String ip=ip_puerto_nombre[0];
        String puerto=ip_puerto_nombre[1];
        String nombre=ip_puerto_nombre[2];
        cliente=new Cliente(this, ip, Integer.valueOf(puerto), nombre);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.setBackground(Color.CYAN);
        jScrollPane1.setForeground(Color.ORANGE);
        
        txtMensaje = new javax.swing.JTextField();
        txtMensaje.setBackground(Color.LIGHT_GRAY);
        txtMensaje.setForeground(Color.CYAN);

        txtHistorial = new javax.swing.JTextArea();
        txtHistorial.setBackground(Color.LIGHT_GRAY);
        txtHistorial.setForeground(Color.RED);

        btnEnviar = new javax.swing.JButton();
        btnEnviar.setBackground(Color.GREEN);

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtHistorial.setEditable(false);
        txtHistorial.setColumns(20);
        txtHistorial.setFont(new java.awt.Font("Courier New", 0, 16)); // NOI18N
        txtHistorial.setForeground(new java.awt.Color(0, 0, 255));
        txtHistorial.setLineWrap(true);
        txtHistorial.setRows(5);
        txtHistorial.setDoubleBuffered(true);
        txtHistorial.setDragEnabled(true);
        
        jScrollPane1.setViewportView(txtHistorial);
        jScrollPane1.setBackground(Color.BLACK);
        jScrollPane1.setForeground(Color.PINK);
        
        txtMensaje.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        txtMensaje.setForeground(new java.awt.Color(0, 255, 0));

        btnEnviar.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        btnEnviar.setText("Enviar");
        btnEnviar.setBackground(Color.GREEN);

        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
            
        });

        jLabel1.setText("Escribe el mensaje");


        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enviar para todos"}));
        jComboBox1.setBackground(Color.RED);
        jComboBox1.setFont(new java.awt.Font("Courier New ", 0, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 0, 255));
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        getContentPane().setBackground(Color.CYAN);
        layout.setHorizontalGroup(

            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEnviar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMensaje))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, 200, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jRadioButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMensaje)
                    .addComponent(btnEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed
    /**
     * Cuando la ventana se este cerrando se notifica al servidor que el cliente
     * se ha desconectado, por lo que los demás clientes del chat no podrán enviarle
     * más mensajes.
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cliente.confirmarDesconexion();
    }//GEN-LAST:event_formWindowClosing

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        //Si no hay m�s clientes del chat con quien comunicarse.

        mensaje=txtMensaje.getText();
        cliente.enviarMensaje(mensaje);
        //se agrega en el historial de la conversaci�n lo que el cliente ha dicho
        txtHistorial.append("Tu usuario: \n" + mensaje+"\n");
        txtMensaje.setText("");
        
    }//GEN-LAST:event_btnEnviarActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void txtMensajetKeyTyped(java.awt.event.KeyEvent evt){
        char Validar=evt.getKeyChar();
        if(txtMensaje.getText().length()>=5){
            evt.consume();
        }else{
            if(!Character.isDigit(Validar));
        }
    }
    
    
    
    
    
     public static void main(String args[]) {

        Color color=new Color(255,175,175);
        UIManager.put("NimbusBase", color);
        UIManager.put("control", color.GREEN);



        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtHistorial;
    private javax.swing.JTextField txtMensaje;
    // End of variables declaration//GEN-END:variables
    /**
     * Constante que almacena el puerto por defecto para la aplicación.
     */
    private final String DEFAULT_PORT="1024";
    /**
     * Constante que almacena la IP por defecto (localhost) para el servidor.
     */    
    private final String DEFAULT_IP="192.168.88.116";
    /**
     * Constante que almacena el cliente, con el cual se gestiona la comunicación 
     * con el servidor.
     */
    private final Cliente cliente;
    /**
     * Agrega un contacto al JComboBox de contactos.
     * @param contacto 
     */
    void addContacto(String contacto) {
   
    }
    /*
     * Agrega un nuevo mensaje al historial de la conversación.
     * @param emisor
     * @param mensaje 
     */
    void addMensaje(String emisor, String mensaje) {

        txtHistorial.append(emisor + " \n" + mensaje+"\n");
        txtHistorial.setBackground(Color.RED);
        txtHistorial.setForeground(Color.BLACK);
    }
    /**
     * Se configura el título de la ventana para una nueva sesión.
     * @param identificador 
     */
    void sesionIniciada(String identificador) {
        this.setTitle("En Línea "+identificador);
    }
    /**
     * Método que abre una ventana para que el usuario ingrese la IP del host en 
     * el que corre el servidor, el puerto con el que escucha y el nombre con el 
     * que quiere participar en el chat.
     * @return 
     */
    private String[] getIP_Puerto_Nombre() {
        String s[]=new String[3];
        s[0]=DEFAULT_IP;
        s[1]=DEFAULT_PORT;
        JTextField ip = new JTextField(20);
        JTextField puerto = new JTextField(20);
        JTextField usuario = new JTextField(20);
        

        ip.setText(DEFAULT_IP);
        ip.setBackground(Color.BLACK);
        ip.setForeground(Color.GREEN);
        puerto.setText(DEFAULT_PORT);
        puerto.setBackground(Color.BLACK);
        puerto.setForeground(Color.GREEN);
        usuario.setText("Usuario");
        usuario.setBackground(Color.BLACK);
        usuario.setForeground(Color.GREEN);
        JPanel myPanel = new JPanel();
        
        myPanel.setLayout(new GridLayout(3, 2));
        myPanel.setBackground(Color.GREEN);
        myPanel.add(new JLabel("Escriba su nombre de usuario:"));
        myPanel.add(usuario);
        myPanel.add(new JLabel("Inserte el IP del Servidor:"));
        myPanel.add(ip);
        myPanel.add(new JLabel("Inserte el Puerto de la conexión:"));
        myPanel.add(puerto);
        myPanel.setForeground(Color.GRAY);   
        myPanel.setFont(new java.awt.Font("Courier New ", 0, 16));
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
                 "Configuracion del usuario", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
                s[0]=ip.getText();
                s[1]=puerto.getText();
                s[2]=usuario.getText();
        }else{
            System.exit(0);
        }
        return s;
    }        
    /*
     * Método que elimina cierto cliente de la lista de contactos, este se llama
     * cuando cierto usuario cierra sesión.
     * @param identificador 
     */
    void eliminarContacto(String identificador) {
        
        System.out.println("Se ha eliminado el usuario");
        
        return;
    }
}